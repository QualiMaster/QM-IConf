<?xml version="1.0" encoding="UTF-8"?>
<project name="ManifestUtils.Test" default="jar" basedir=".">
	<!-- import of the global Jenkins properties -->
	<property file="${user.home}/global-build.properties"/>
	<property file="${user.home}/qualimaster-build.properties"/>
	
	<!-- Settings for the project -->
	<property name="src.dir" value="src"/>
	<property name="javacSource" value="1.7"/>
	<property name="javacTarget" value="1.7"/>
	
	<path id ="includes"> 
        <pathelement path="${libs.ManifestUtils.java}"/>
        <fileset dir="${eclipse.plugins.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
	
	<!-- Targets  -->
	<target name="init">
		<!-- Delete generated folders -->
		<delete dir="${build.base.dir}"/>
		
		<!-- Create folders -->
        <mkdir dir="${build.base.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.jar.dir}"/>
	</target>
	
	<!-- Compile all files without test classes -->
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" debug="on" destdir="${build.classes.dir}" includeAntRuntime="no" failonerror="true" source="${javacSource}" target="${javacTarget}" encoding="${javac.encoding}">
			<classpath refid="includes" />	
		</javac>
    </target>
    
    <target name="test" depends="compile">
      <jacoco:coverage output="file" destfile="jacoco.exec">
        <junit printsummary="withOutAndErr" dir="${build.base.dir}" fork="true" timeout="240000" >
            <classpath>
                <path refid="includes" />
                <pathelement location="${build.classes.dir}" />
            </classpath>
            <test name="test.eu.qualimster.manifestUtils.AllTests" haltonfailure="no" outfile="result">
                <formatter type="xml" />
            </test>
          </junit>
      </jacoco:coverage>
    </target>
    	
	<!-- Creates a jar file -->
	<target name="jar" depends="test">
		<!-- Copy needed non class files -->
		<copy todir="${build.classes.dir}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="lib/**/*" />
			</fileset>
		</copy>
		<jar destfile="${build.jar.dir}/${ant.project.name}.jar" basedir="${build.classes.dir}" manifest="META-INF/MANIFEST.MF"/>
        <copy todir="${qm.bundles.dir}">
            <fileset dir="${build.jar.dir}" includes="**/*.jar"/>
        </copy>
	</target>
</project>
